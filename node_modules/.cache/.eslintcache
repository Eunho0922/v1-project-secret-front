[{"/Users/rlaisqls/Documents/github/v1-project-secret-front/src/index.jsx":"1","/Users/rlaisqls/Documents/github/v1-project-secret-front/src/reportWebVitals.jsx":"2","/Users/rlaisqls/Documents/github/v1-project-secret-front/src/request/Done.jsx":"3","/Users/rlaisqls/Documents/github/v1-project-secret-front/src/request/Request.jsx":"4","/Users/rlaisqls/Documents/github/v1-project-secret-front/src/manage/ProjectApprove.jsx":"5","/Users/rlaisqls/Documents/github/v1-project-secret-front/src/manage/ProjectList.jsx":"6"},{"size":1087,"mtime":1698582124663,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1698469256291,"results":"9","hashOfConfig":"8"},{"size":1264,"mtime":1698676511168,"results":"10","hashOfConfig":"8"},{"size":8865,"mtime":1698669647891,"results":"11","hashOfConfig":"8"},{"size":5847,"mtime":1698676464645,"results":"12","hashOfConfig":"8"},{"size":6816,"mtime":1698676476671,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1usk3ip",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/Users/rlaisqls/Documents/github/v1-project-secret-front/src/index.jsx",[],[],"/Users/rlaisqls/Documents/github/v1-project-secret-front/src/reportWebVitals.jsx",[],[],"/Users/rlaisqls/Documents/github/v1-project-secret-front/src/request/Done.jsx",[],[],"/Users/rlaisqls/Documents/github/v1-project-secret-front/src/request/Request.jsx",[],[],"/Users/rlaisqls/Documents/github/v1-project-secret-front/src/manage/ProjectApprove.jsx",["34"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { TableHeaderCell, TableDataCell, Checkbox } from './ProjectList';\n\nexport const ProjectApprove = () => {\n\n  const [data, setData] = useState([]);\n  const [selected, setSelected] = useState([])\n  const [progress, setProgress] = useState('')\n  const [isProgressing, setIsProgressing] = useState(false)\n  const [progressed, setProgressed] = useState([]);\n\n  const [secret, setSecret] = useState('');\n  const [fetchError, setFetchError] = useState('');\n  \n  useEffect(() => {\n    const currentURL = new URL(window.location.href);\n    const searchParams = currentURL.searchParams;\n    console.log(searchParams.get('secret'))\n    setSecret(searchParams.get('secret'))\n  }, []);\n\n  const fetchData = async () => {\n    const url = 'http://localhost:8080/project-secret-manager/project?secret=' + secret\n    await axios.get(url)\n      .then((res) => {setData(res.data); setFetchError(\"\")})\n      .catch((err) => setFetchError(\"권한이 없습니다\"));\n  }\n  useEffect(() => {\n    fetchData();\n  }, [secret]);\n\n  const approveProject = async () => {\n    if (isProgressing || progressed.length > 0) return;\n    setIsProgressing(true)\n    setProgress('승인중...')\n\n    selected.forEach(async (it) => {\n      const url = 'http://localhost:8080/project-secret-manager/project/approve/' + it.id + '?secret=' + secret\n      await axios.post(url)\n        .then((res) => {\n          setProgressed([...progressed, it]);\n          if (progressed.length === selected.length) {\n            setProgressed([]);\n            setProgress('승인 완료!')\n            setIsProgressing(false)\n          } \n        })\n        .catch((err) => {\n          setProgressed([]);\n          setSelected([]);\n          setProgress('승인 실패 ' + err)\n          setIsProgressing(false)\n        });\n    })\n  }\n\n  const deleteProject = async () => {\n    if (isProgressing) return;\n\n    selected.forEach(async (it) => {\n\n    setProgress('삭제중...')\n    setIsProgressing(true)\n      const url = 'http://localhost:8080/project-secret-manager/project/' + it.id + '?secret=' + secret\n      await axios.delete(url)\n        .then((res) => {\n          setProgressed([...progressed, it]);\n          if (progressed.length === selected.length) {\n            setProgressed([]);\n            setProgress('삭제 완료!')\n            setIsProgressing(false)\n          } \n        })\n        .catch((err) => {\n          setProgressed([]);\n          setSelected([]);\n          setProgress('삭제 실패 ' + err)\n          setIsProgressing(false)\n        });\n    })\n  }\n\n  const toggleSelect = async (item) => {\n    if (isProgressing) return;\n    selected.some((it) => it.id === item.id) ? setSelected(selected.filter(it => it.id !== item.id)) : setSelected([...selected, item])\n  }\n\n  const selectColor = (isSelected) => isSelected ? 'bg-blue-200' : 'bg-white'\n\n  return (\n    <div className=\"bg-gray-100 p-4\">\n      <a href={\"/admin/list?secret=\" + secret}>\n        <h1 className=\"text-[20px] text-slate-400 font-bold mb-4\">등록된 프로젝트 목록 ({data.filter((item) => item.isApproved).length})</h1>\n      </a>\n      <h1 className=\"text-[20px] font-bold mb-4\">요청된 프로젝트 목록 ({data.filter((item) => !item.isApproved).length})</h1>\n      <div>\n        <div\n          className=\"px-4 py-2 mt-6 w-fit outline outline-2 outline-blue-500 text-blue-500 rounded-md hover:outline-blue-800 hover:text-blue-800\"\n          onClick={() => setSelected([]) }\n        >\n          선택 초기화\n        </div>\n        <div className='absolute right-6 top-[90px] flex flex-row gap-[10px]'>\n          <div className='w-fit px-4 py-2 mt-6 text-black rounded-md'>\n            {progress}\n          </div>\n          <div\n            className=\"w-fit px-4 py-2 mt-6 text-white bg-blue-500 rounded-md hover:bg-blue-700 focus:outline-none focus:shadow-outline\"\n            onClick={() => approveProject() }\n          >\n            승인\n          </div>\n          <div\n            className=\"w-fit px-4 py-2 mt-6 text-white bg-red-500 rounded-md hover:bg-red-700 focus:outline-none focus:shadow-outline\"\n            onClick={() => deleteProject() }\n          >\n            삭제\n          </div>\n        </div>\n      </div>\n      <table className=\"min-w-full divide-y divide-gray-200\">\n        <thead className=\"bg-gray-50\">\n          <tr>\n            <TableHeaderCell value=\"이름\" />\n            <TableHeaderCell value=\"영어이름\" />\n            <TableHeaderCell value=\"레포지토리\" />\n            <TableHeaderCell value=\"타입\" />\n            <TableHeaderCell value=\"생성일\" />\n            <TableHeaderCell value=\"팀\" />\n            <TableHeaderCell value=\"레디스 사용\" />\n            <TableHeaderCell value=\"MySQL 사용\" />\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200\">\n          {data\n            .filter((item) => !item.isApproved)\n            .map((item) => \n              <tr \n                className={selectColor(selected.some((it) => it.id === item.id))}\n                key={item.id}\n                onClick={() => toggleSelect(item)}\n              >\n                <TableDataCell value={item.nameKo} />\n                <TableDataCell value={item.nameEn} />\n                <TableDataCell value={item.repository} link={\"https://github.com/\" + item.repository} />\n                <TableDataCell value={item.type} />\n                <TableDataCell value={item.createAt} />\n                <TableDataCell value={item.team} />\n                <TableDataCell value={<Checkbox isChecked={item.useRedis}/>}/>\n                <TableDataCell value={<Checkbox isChecked={item.useMysql}/>}/>\n              </tr>\n            )\n          }\n        </tbody>\n      </table>\n      {fetchError && <>{fetchError}</>}\n    </div>\n  );\n}\n","/Users/rlaisqls/Documents/github/v1-project-secret-front/src/manage/ProjectList.jsx",["35"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const TableHeaderCell = ({ value }) => {\n  return (\n    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n      {value}\n    </th>\n  );\n};\n\nexport const TableDataCell = ({ value, link }) => {\n  return (\n    <td className=\"px-6 py-4 whitespace-nowrap\">\n      {link ? <a href={link}>{value}</a> : value}\n    </td>\n  );\n};\n\nexport const Checkbox = ({isChecked}) => {\n  return (\n    <>\n      <input\n        className=\"ml-[5px] transform scale-150\"\n        type=\"checkbox\"\n        checked={isChecked}\n      />\n    </>\n  )\n}\n\nexport const ProjectList = () => {\n\n  const [data, setData] = useState([]);\n  const [selected, setSelected] = useState([])\n  const [progress, setProgress] = useState('')\n  const [isProgressing, setIsProgressing] = useState(false)\n  const [progressed, setProgressed] = useState([]);\n\n  const [secret, setSecret] = useState('');\n  const [fetchError, setFetchError] = useState('');\n\n  useEffect(() => {\n    const currentURL = new URL(window.location.href);\n    const searchParams = currentURL.searchParams;\n    console.log(searchParams.get('secret'))\n    setSecret(searchParams.get('secret'))\n  }, []);\n\n  const fetchData = async () => {\n    const url = 'http://localhost:8080/project-secret-manager/project?secret=' + secret\n    console.log(url)\n    await axios.get(url)\n      .then((res) => {setData(res.data); setFetchError(\"\")})\n      .catch((err) => setFetchError(\"권한이 없습니다\"));\n  }\n  useEffect(() => {\n    fetchData();\n  }, [secret]);\n\n  const regenerateProjectSecret = async () => {\n    if (isProgressing) return;\n    setIsProgressing(true)\n    setProgress('발급중...')\n\n    selected.forEach(async (it) => {\n      const url = 'http://localhost:8080/project-secret-manager/project/' + it.id + '/access-key?secret=' + secret\n      await axios.post(url)\n        .then((res) => {\n          setProgressed([...progressed, it]);\n          if (progressed.length === selected.length) {\n            setProgressed([]);\n            setProgress('재발급 완료!')\n            setIsProgressing(false)\n          } \n        })\n        .catch((err) => {\n          setProgressed([]);\n          setSelected([]);\n          setProgress('재발급 실패 ' + err)\n          setIsProgressing(false)\n        });\n    })\n\n    setProgress('재발급 완료!')\n    setIsProgressing(false)\n  }\n\n  const deleteProject = async () => {\n    if (isProgressing) return;\n\n    selected.forEach(async (it) => {\n\n      setProgress('삭제중...')\n      setIsProgressing(true)\n      const url = 'https://prod-server.xquare.app/project-secret-manager/project/' + it.id + '?secret=' + secret\n      await axios.delete(url)\n        .then((res) => {\n          setProgressed([...progressed, it]);\n          if (progressed.length === selected.length) {\n            setProgressed([]);\n            setProgress('삭제 완료!')\n            setIsProgressing(false)\n          } \n        })\n        .catch((err) => {\n          setProgressed([]);\n          setSelected([]);\n          setProgress('삭제 실패 ' + err)\n          setIsProgressing(false)\n        });\n    })\n    \n    setProgress('삭제 완료!')\n    setIsProgressing(false)\n    setData([])\n  }\n\n  const toggleSelect = async (item) => {\n    if (isProgressing) return;\n    selected.some((it) => it.id === item.id) ?\n      setSelected(selected.filter(it => it.id !== item.id)) : setSelected([...selected, item])\n  }\n\n  const selectColor = (isSelected) => isSelected ? 'bg-blue-200' : 'bg-white'\n\n  return (\n    <div className=\"bg-gray-100 p-4\">\n      <h1 className=\"text-[20px] font-bold mb-4\">등록된 프로젝트 목록 ({data.filter((item) => item.isApproved).length})</h1>\n      <a href={\"/admin/approve?secret=\" + secret}>\n        <h1 className=\"text-[20px] text-slate-400 font-bold mb-4\">요청된 프로젝트 목록 ({data.filter((item) => !item.isApproved).length})</h1>\n      </a>\n      <div>\n        <div\n          className=\"px-4 py-2 mt-6 w-fit outline outline-2 outline-blue-500 text-blue-500 rounded-md hover:outline-blue-800 hover:text-blue-800\"\n          onClick={() => setSelected([]) }\n        >\n          선택 초기화\n        </div>\n        <div className='absolute right-6 top-[90px] flex flex-row gap-[10px]'>\n          <div className='w-fit px-4 py-2 mt-6 text-black rounded-md'>\n            {progress}\n          </div>\n          <div\n            className=\"w-fit px-4 py-2 mt-6 text-white bg-blue-500 rounded-md hover:bg-blue-700 focus:outline-none focus:shadow-outline\"\n            onClick={() => regenerateProjectSecret() }\n          >\n            재발급\n          </div>\n          <div\n            className=\"w-fit px-4 py-2 mt-6 text-white bg-red-500 rounded-md hover:bg-red-700 focus:outline-none focus:shadow-outline\"\n            onClick={() => deleteProject() }\n          >\n            삭제\n          </div>\n        </div>\n      </div>\n      <table className=\"min-w-full divide-y divide-gray-200\">\n        <thead className=\"bg-gray-50\">\n          <tr>\n            <TableHeaderCell value=\"이름\" />\n            <TableHeaderCell value=\"영어이름\" />\n            <TableHeaderCell value=\"레포지토리\" />\n            <TableHeaderCell value=\"타입\" />\n            <TableHeaderCell value=\"생성일\" />\n            <TableHeaderCell value=\"최종배포일\" />\n            <TableHeaderCell value=\"최종배포성공여부\" />\n            <TableHeaderCell value=\"팀\" />\n            <TableHeaderCell value=\"레디스 사용\" />\n            <TableHeaderCell value=\"MySQL 사용\" />\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200\">\n          {data\n            .filter((item) => item.isApproved)\n            .map((item) => \n              <tr \n                className={selectColor(selected.some((it) => it.id === item.id))}\n                key={item.id}\n                onClick={() => toggleSelect(item)}\n              >\n                <TableDataCell value={item.nameKo} />\n                <TableDataCell value={item.nameEn} />\n                <TableDataCell value={item.repository} link={\"https://github.com/\" + item.repository} />\n                <TableDataCell value={item.type} />\n                <TableDataCell value={item.createAt} />\n                <TableDataCell value={item.lastUsedAt} />\n                <TableDataCell value={<Checkbox isChecked={item.lastRequestSucceed}/>}/>\n                <TableDataCell value={item.team} />\n                <TableDataCell value={<Checkbox isChecked={item.useRedis}/>}/>\n                <TableDataCell value={<Checkbox isChecked={item.useMysql}/>}/>\n              </tr>\n            )\n          }\n        </tbody>\n      </table>\n      {fetchError && <>{fetchError}</>}\n    </div>\n  );\n}\n",{"ruleId":"36","severity":1,"message":"37","line":31,"column":6,"nodeType":"38","endLine":31,"endColumn":14,"suggestions":"39"},{"ruleId":"36","severity":1,"message":"37","line":59,"column":6,"nodeType":"38","endLine":59,"endColumn":14,"suggestions":"40"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["41"],["42"],{"desc":"43","fix":"44"},{"desc":"43","fix":"45"},"Update the dependencies array to be: [fetchData, secret]",{"range":"46","text":"47"},{"range":"48","text":"47"},[1064,1072],"[fetchData, secret]",[1590,1598]]